import { Tokenizer } from "@mlc-ai/web-tokenizers";
/**
 * The class that streams back validated utf-8 text strings generated by the tokenizer. We need
 * such a buffering mechanism as decoding each token may not result in the same string when several
 * tokens are required to form the valid utf-8 text. Consider the case of emojis which compose of
 * 4 tokens.
 *
 * The implementation follows that in https://github.com/mlc-ai/mlc-llm/blob/main/cpp/streamer.cc
 * The main difference is that in C++, the replacement character takes three characters.
 */
export declare class TextStreamer {
    private tokenizer;
    private prefix_tokens;
    private pending_tokens;
    private finished;
    readonly kReplacementCharacter = "\uFFFD";
    constructor(tokenizer: Tokenizer);
    /**
     * Put new delta tokens into the streamer, and get the UTF-8-valid delta string. The text streamer
     * may hold some of the input delta tokens which cannot decode into valid UTF-8 strings. The
     * returned string is always guaranteed to be UTF-8 valid.
     * @param delta_tokens The new tokens to put into the streamer.
     * @return The decoded delta string after putting the input new tokens, can be empty.
     */
    put(delta_tokens: number[]): string;
    finish(): string;
}
//# sourceMappingURL=streamer.d.ts.map